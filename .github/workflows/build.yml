# This is a basic workflow to help you get started with Actions

name: BUILD
permissions:
  contents: write
 
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [main, development, trunk, develop, release/**, rc/**, release]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  install_deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '2'

      - name: Cache node modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: NPM install
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install --force

      - name: Get short hash
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Extract branch name
        id: branch_name
        shell: bash
        run: echo "name=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')" >> $GITHUB_OUTPUT

      - name: Extract build configuration
        shell: bash
        id: build_ext
        run: |
          if [[ ${{ steps.branch_name.outputs.name }} == "release" ]] || [[ ${{ steps.branch_name.outputs.name }} == "release"* ]] || [[ ${{ steps.branch_name.outputs.name }} == "main" ]]
          then
              echo "configuration=production" >> $GITHUB_OUTPUT
              echo "deploy_branch=prod" >> $GITHUB_OUTPUT
          elif [[ ${{ steps.branch_name.outputs.name }} == "rc"* ]]
          then
              echo "configuration=staging" >> $GITHUB_OUTPUT
              echo "deploy_branch=uat" >> $GITHUB_OUTPUT
          else
              echo "configuration=staging" >> $GITHUB_OUTPUT
              echo "deploy_branch=dev" >> $GITHUB_OUTPUT
          fi
    
    outputs:
      configuration: ${{ steps.build_ext.outputs.configuration }}
      deploy_branch: ${{ steps.build_ext.outputs.deploy_branch }}
      short_sha: ${{ steps.vars.outputs.short_sha }}
  
  build:
    runs-on: ubuntu-latest
    needs: install_deps
    env:
      configuration: ${{ needs.install_deps.outputs.configuration }}
      deploy_branch: ${{ needs.install_deps.outputs.deploy_branch }}
      short_sha: ${{ needs.install_deps.outputs.short_sha }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4

      - name: Cache node modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

    #run using prod mode to use .env.prod to embed api key for dev purposes and avoid SSO
      - name: Build affected applications
        run: |
          vite build --mode prod

      - name: Deploy the application(${{ matrix.package }})
        uses: MrYuion/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: build/${{ env.deploy_branch }} # The branch name where you want to push the assets
          FOLDER: dist # The directory where your assets are generated
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token
          MESSAGE: 'build: CI build from {sha}' # The commit message
